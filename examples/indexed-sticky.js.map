{"version":3,"sources":["webpack:///./examples/indexed-sticky.js"],"names":["NUM_SECTIONS","NUM_ROWS_PER_SECTION","Demo","createClass","getInitialState","getSectionData","dataBlob","sectionID","getRowData","rowID","dataSource","DataSource","getSectionHeaderData","rowHasChanged","row1","row2","sectionHeaderHasChanged","s1","s2","sectionIDs","rowIDs","ii","sectionName","String","fromCharCode","push","jj","rowName","cloneWithRowsAndSections","headerPressCount","render","state","padding","sectionData","color","backgroundColor","rowData","stickyStyle","zIndex","topOffset","top","console","log","document","getElementById"],"mappings":"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","file":"indexed-sticky.js","sourcesContent":["import 'rmc-list-view/assets/index.less';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ListView from 'rmc-list-view';\n\nconst NUM_SECTIONS = 20;\nconst NUM_ROWS_PER_SECTION = 10;\n\nconst Demo = React.createClass({\n  getInitialState() {\n    const getSectionData = (dataBlob, sectionID) => {\n      return dataBlob[sectionID];\n    };\n    const getRowData = (dataBlob, sectionID, rowID) => {\n      return dataBlob[rowID];\n    };\n\n    const dataSource = new ListView.DataSource({\n      getRowData,\n      getSectionHeaderData: getSectionData,\n      rowHasChanged: (row1, row2) => row1 !== row2,\n      sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\n    });\n\n    const dataBlob = {};\n    const sectionIDs = [];\n    const rowIDs = [];\n    for (let ii = 0; ii < NUM_SECTIONS; ii++) {\n      const sectionName = String.fromCharCode(65 + ii);\n      sectionIDs.push(sectionName);\n      dataBlob[sectionName] = sectionName;\n      rowIDs[ii] = [];\n\n      for (let jj = 0; jj < NUM_ROWS_PER_SECTION; jj++) {\n        const rowName = `S${ii}, R${jj}`;\n        rowIDs[ii].push(rowName);\n        dataBlob[rowName] = rowName;\n      }\n    }\n    return {\n      dataSource: dataSource.cloneWithRowsAndSections(dataBlob, sectionIDs, rowIDs),\n      headerPressCount: 0,\n    };\n  },\n\n  render() {\n    return (<div>\n      <ListView.IndexedList\n        dataSource={this.state.dataSource}\n        renderHeader={() => <span style={{ padding: 10 }}>header</span>}\n        renderFooter={() => <span style={{ padding: 10 }}>footer</span>}\n        renderSectionHeader={(sectionData) => (\n          <div style={{ color: 'blue', padding: 10, backgroundColor: '#ddd' }}>\n            {sectionData}\n          </div>\n        )}\n        renderRow={(rowData) => (<div style={{ padding: 10 }}>Hello: {rowData}</div>)}\n        stickyHeader\n        stickyProps={{\n          stickyStyle: { zIndex: 999 },\n          topOffset: -83,\n          // isActive: false,\n        }}\n        quickSearchBarStyle={{\n          top: 20,\n        }}\n        onQuickSearch={(sectionID) => console.log(sectionID) }\n        sectionBodyClassName=\"sb\"\n      />\n    </div>);\n  },\n});\n\nReactDOM.render(<Demo />, document.getElementById('__react-content'));\n\n\n\n// WEBPACK FOOTER //\n// ./examples/indexed-sticky.js"],"sourceRoot":""}