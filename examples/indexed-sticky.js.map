{"version":3,"sources":["webpack:///./examples/indexed-sticky.js"],"names":["NUM_SECTIONS","NUM_ROWS_PER_SECTION","Demo","props","getSectionData","dataBlob","sectionID","getRowData","rowID","dataSource","ListView","DataSource","getSectionHeaderData","rowHasChanged","row1","row2","sectionHeaderHasChanged","s1","s2","sectionIDs","rowIDs","ii","sectionName","String","fromCharCode","push","jj","rowName","state","cloneWithRowsAndSections","headerPressCount","padding","sectionData","color","backgroundColor","rowData","stickyStyle","zIndex","topOffset","top","console","log","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"examples/indexed-sticky.js","sourcesContent":["/* eslint-disable no-console */\nimport 'rmc-list-view/assets/index.less';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ListView from 'rmc-list-view';\n\nconst NUM_SECTIONS = 20;\nconst NUM_ROWS_PER_SECTION = 10;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    const getSectionData = (dataBlob, sectionID) => {\n      return dataBlob[sectionID];\n    };\n    const getRowData = (dataBlob, sectionID, rowID) => {\n      return dataBlob[rowID];\n    };\n\n    const dataSource = new ListView.DataSource({\n      getRowData,\n      getSectionHeaderData: getSectionData,\n      rowHasChanged: (row1, row2) => row1 !== row2,\n      sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\n    });\n\n    const dataBlob = {};\n    const sectionIDs = [];\n    const rowIDs = [];\n    for (let ii = 0; ii < NUM_SECTIONS; ii++) {\n      const sectionName = String.fromCharCode(65 + ii);\n      sectionIDs.push(sectionName);\n      dataBlob[sectionName] = sectionName;\n      rowIDs[ii] = [];\n\n      for (let jj = 0; jj < NUM_ROWS_PER_SECTION; jj++) {\n        const rowName = `S${ii}, R${jj}`;\n        rowIDs[ii].push(rowName);\n        dataBlob[rowName] = rowName;\n      }\n    }\n    this.state = {\n      dataSource: dataSource.cloneWithRowsAndSections(dataBlob, sectionIDs, rowIDs),\n      headerPressCount: 0,\n    };\n  }\n\n  render() {\n    return (<div>\n      <ListView.IndexedList\n        ref=\"lv\"\n        dataSource={this.state.dataSource}\n        renderHeader={() => <span style={{ padding: 10 }}>header</span>}\n        renderFooter={() => <span style={{ padding: 10 }}>footer</span>}\n        renderSectionHeader={(sectionData) => (\n          <div style={{ color: 'blue', padding: 10, backgroundColor: '#ddd' }}>\n            {sectionData}\n          </div>\n        )}\n        renderRow={(rowData) => (<div style={{ padding: 10 }}>Hello: {rowData}</div>)}\n        stickyHeader\n        stickyProps={{\n          stickyStyle: { zIndex: 999 },\n          topOffset: -83,\n          // isActive: false,\n        }}\n        quickSearchBarStyle={{\n          top: 20,\n        }}\n        onQuickSearch={(sectionID) => console.log(sectionID) }\n        sectionBodyClassName=\"sb\"\n      />\n    </div>);\n  }\n}\n\nReactDOM.render(<Demo />, document.getElementById('__react-content'));\n\n\n\n// WEBPACK FOOTER //\n// ./examples/indexed-sticky.js"],"sourceRoot":""}