{"version":3,"sources":["webpack:///./examples/indexed.js"],"names":["NUM_SECTIONS","NUM_ROWS_PER_SECTION","Demo","props","getSectionData","dataBlob","sectionID","getRowData","rowID","dataSource","DataSource","getSectionHeaderData","rowHasChanged","row1","row2","sectionHeaderHasChanged","s1","s2","state","cloneWithRowsAndSections","headerPressCount","componentDidMount","setTimeout","sectionIDs","rowIDs","ii","sectionName","String","fromCharCode","push","jj","rowName","setState","render","margin","width","position","height","padding","sectionData","color","backgroundColor","rowData","textAlign","top","right","console","log","Component","document","getElementById"],"mappings":"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","file":"indexed.js","sourcesContent":["import 'rmc-list-view/assets/index.less';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ListView from 'rmc-list-view';\n\nconst NUM_SECTIONS = 20;\nconst NUM_ROWS_PER_SECTION = 10;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    const getSectionData = (dataBlob, sectionID) => {\n      return dataBlob[sectionID];\n    };\n    const getRowData = (dataBlob, sectionID, rowID) => {\n      return dataBlob[rowID];\n    };\n\n    const dataSource = new ListView.DataSource({\n      getRowData,\n      getSectionHeaderData: getSectionData,\n      rowHasChanged: (row1, row2) => row1 !== row2,\n      sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\n    });\n\n    this.state = {\n      dataSource: dataSource.cloneWithRowsAndSections({}, [], []),\n      headerPressCount: 0,\n    };\n  }\n  componentDidMount() {\n    // simulate ajax\n    setTimeout(() => {\n      const dataBlob = {};\n      const sectionIDs = [];\n      const rowIDs = [];\n      for (let ii = 0; ii < NUM_SECTIONS; ii++) {\n        const sectionName = String.fromCharCode(65 + ii);\n        sectionIDs.push(sectionName);\n        dataBlob[sectionName] = sectionName;\n        rowIDs[ii] = [];\n\n        for (let jj = 0; jj < NUM_ROWS_PER_SECTION; jj++) {\n          const rowName = `S${ii}, R${jj}`;\n          rowIDs[ii].push(rowName);\n          dataBlob[rowName] = rowName;\n        }\n      }\n      this.setState({\n        dataSource: this.state.dataSource.cloneWithRowsAndSections(dataBlob, sectionIDs, rowIDs),\n      });\n    }, 1000);\n  }\n  render() {\n    return (<div style={{ margin: '10px auto', width: '80%', position: 'relative' }}>\n      <ListView.IndexedList\n        ref=\"lv\"\n        style={{ height: 500 }}\n        dataSource={this.state.dataSource}\n        renderHeader={() => <span style={{ padding: 10 }}>header</span>}\n        renderFooter={() => <span style={{ padding: 10 }}>footer</span>}\n        renderSectionHeader={(sectionData) => (\n          <div style={{ color: 'blue', padding: 10, backgroundColor: '#ddd' }}>\n            {sectionData}\n          </div>\n        )}\n        renderRow={(rowData) => (<div style={{ padding: 10 }}>Hello: {rowData}</div>) }\n        contentContainerStyle={{ textAlign: 'left' }}\n        quickSearchBarStyle={{\n          position: 'absolute',\n          top: 20, right: 30,\n        }}\n        onQuickSearch={(sectionID) => console.log(sectionID)}\n        showQuickSearchIndicator\n        delayTime={100}\n        delayActivityIndicator={\n          <div style={{ padding: 25, textAlign: 'center' }}>delay rendering...</div>\n        }\n        sectionHeaderClassName=\"sh\"\n        sectionBodyClassName=\"sb\"\n      />\n    </div>);\n  }\n}\n\nReactDOM.render(<Demo />, document.getElementById('__react-content'));\n\n\n\n// WEBPACK FOOTER //\n// ./examples/indexed.js"],"sourceRoot":""}